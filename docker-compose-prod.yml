services:
  db:
    image: postgres:17
    container_name: myapp-db
    restart: unless-stopped
    networks: [cronicorn]
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "6666:5432" # expose DB to host (optionally remove this)
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  migrator:
    build:
      context: .
      dockerfile: Dockerfile.migrator
      target: migrator
    container_name: cronicorn-migrator
    restart: "no"
    networks: [cronicorn]
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: ${DATABASE_URL}

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    networks: [cronicorn]
    container_name: api
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      migrator:
        condition: service_completed_successfully
    environment:
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      AUTH_SECRET: ${AUTH_SECRET}
      DATABASE_URL: ${DATABASE_URL}
      CRONICORN_API_URL: ${CRONICORN_API_URL}
    ports:
      - "3333:3333" # expose API to host

  scheduler:
    build:
      context: .
      dockerfile: Dockerfile.scheduler
    networks: [cronicorn]
    container_name: scheduler
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      migrator:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: ${DATABASE_URL}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      AI_MODEL: ${AI_MODEL}
      NODE_ENV: production

volumes:
  db_data:

networks:
  cronicorn:
    driver: bridge
