# syntax=docker/dockerfile:1.4

ARG NODE_VERSION=24.5.0
ARG PNPM_VERSION=10.17.1

# -------- Base (tiny init + sane defaults) --------
FROM node:${NODE_VERSION}-alpine AS base
ENV CI=1 NODE_ENV=production NODE_OPTIONS="--enable-source-maps"
RUN apk add --no-cache tini
ENTRYPOINT ["/sbin/tini","--"]

# -------- Deps (install full workspace deps for building) --------
FROM base AS deps
RUN corepack enable && corepack prepare pnpm@${PNPM_VERSION} --activate
WORKDIR /repo
COPY pnpm-lock.yaml ./
COPY package.json pnpm-workspace.yaml ./
COPY packages/ packages/
COPY apps/ apps/


# Install dependencies
RUN pnpm install --frozen-lockfile

# -------- Builder --------
FROM deps AS builder
# Copy application source code
COPY . .

# Build using TypeScript project references (builds all dependencies)
RUN pnpm run build

# Create a pruned node_modules for the API with all dependencies
# Note: Must include migrations folder from adapter-drizzle
RUN pnpm deploy --filter=@cronicorn/api --legacy /tmp/api-deploy

# Copy the built dist folder to the deploy directory
RUN cp -r /repo/apps/api/dist /tmp/api-deploy/

# Stage 2: Final Production Image
FROM node:lts-alpine AS runner

WORKDIR /app

# -------- Runtime image: API --------
FROM node:${NODE_VERSION}-alpine AS api
ENV NODE_ENV=production
USER node
WORKDIR /app
# Copy everything from the deploy directory
COPY --chown=node:node --from=builder /tmp/api-deploy ./
CMD ["node","dist/index.js"]