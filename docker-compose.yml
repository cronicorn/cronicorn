services:
  db:
    image: postgres:17
    container_name: cronicorn-db
    restart: ${DB_RESTART:-unless-stopped}
    networks:
      - cronicorn
    ports:
      - "${DB_PORT:-6666}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-db}
    healthcheck:
      test: [CMD-SHELL, "pg_isready -U ${POSTGRES_USER:-user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - "../files/cronicorndatabasevolume:/var/lib/postgresql/data"

  migrator:
    image: ${IMAGE_REGISTRY:-ghcr.io/weskerllc/cronicorn}/migrator:${IMAGE_TAG:-latest}
    container_name: ${COMPOSE_PROJECT_NAME:-cronicorn}-migrator
    restart: no
    networks:
      - cronicorn
    depends_on:
      db:
        condition: service_healthy
    environment:
      # Override DATABASE_URL to use container hostname (local .env uses localhost:6666)
      DATABASE_URL: postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@cronicorn-db:5432/${POSTGRES_DB:-db}

  api:
    image: ${IMAGE_REGISTRY:-ghcr.io/weskerllc/cronicorn}/api:${IMAGE_TAG:-latest}
    container_name: cronicorn-api
    restart: unless-stopped
    networks:
      - cronicorn
    depends_on:
      db:
        condition: service_healthy
      migrator:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@cronicorn-db:5432/${POSTGRES_DB:-db}
      PORT: ${PORT:-3333}
      BETTER_AUTH_SECRET: ${BETTER_AUTH_SECRET}
      BETTER_AUTH_URL: ${BETTER_AUTH_URL}
      WEB_URL: ${WEB_URL}
      API_URL: ${API_URL}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      NODE_ENV: ${NODE_ENV:-production}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      STRIPE_PRICE_PRO: ${STRIPE_PRICE_PRO}
      STRIPE_PRICE_ENTERPRISE: ${STRIPE_PRICE_ENTERPRISE}
      BASE_URL: ${BASE_URL}
    ports:
      - "${PORT:-3333}:3333"

  scheduler:
    image: ${IMAGE_REGISTRY:-ghcr.io/weskerllc/cronicorn}/scheduler:${IMAGE_TAG:-latest}
    container_name: cronicorn-scheduler
    restart: unless-stopped
    networks:
      - cronicorn
    depends_on:
      db:
        condition: service_healthy
      migrator:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@cronicorn-db:5432/${POSTGRES_DB:-db}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      AI_MODEL: ${AI_MODEL}
      NODE_ENV: ${NODE_ENV:-production}

  ai-planner:
    image: ${IMAGE_REGISTRY:-ghcr.io/weskerllc/cronicorn}/ai-planner:${IMAGE_TAG:-latest}
    container_name: cronicorn-ai-planner
    restart: unless-stopped
    networks:
      - cronicorn
    depends_on:
      db:
        condition: service_healthy
      migrator:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@cronicorn-db:5432/${POSTGRES_DB:-db}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      AI_MODEL: ${AI_MODEL:-gpt-4o-mini}
      AI_ANALYSIS_INTERVAL_MS: ${AI_ANALYSIS_INTERVAL_MS:-300000}
      AI_LOOKBACK_MINUTES: ${AI_LOOKBACK_MINUTES:-5}
      AI_MAX_TOKENS: ${AI_MAX_TOKENS:-500}
      AI_TEMPERATURE: ${AI_TEMPERATURE:-0.7}
      NODE_ENV: ${NODE_ENV:-production}

  web:
    image: ${IMAGE_REGISTRY:-ghcr.io/weskerllc/cronicorn}/web:${IMAGE_TAG:-latest}
    container_name: cronicorn-web
    networks:
      - cronicorn
    ports:
      - "5173:80"
    depends_on:
      - api
    restart: unless-stopped

networks:
  cronicorn:
    driver: bridge
